import xml.etree.ElementTree as ET
test_file = '/home/alex/Downloads/ICSI_plus_NXT/ICSIplus/Contributions/Summarization/extractive/Buw001.extsumm.xml'

def xmlData(file):
    root = ET.parse(file).getroot()
    data = []
    for extsumm in root.iter():
        href = extsumm.get('href')
        if href != None:
            data.append(href.split('#'))
    
    #Strip contents from id(contents)
    for i in range(len(data)):
        data[i][1] = data[i][1].replace('id(' , '')
        data[i][1] = data[i][1].replace(')' , '')
    
    #Data is not always stored cleanly in xml file, this function cleansup odd shaped data
    #that can come in the form of {file: [dial1, dial 2]} -> {file: [dial1, file:dial2]}
        if data[i][1].find('..') != -1:
            item_1, item_2 = data[i][1].split('..')
            data[i][1] = item_1
            data.append([data[i][0],item_2])
    return data

raw_data = xmlData(test_file)

def dialogueSearch(files):
    #General Location for all files in the "dialogue act folder"
    location = '/home/alex/Downloads/ICSI_plus_NXT/ICSIplus/DialogueActs/'
    file_name, dialogue_name = zip(*files)
    d = dict(zip(range(len(file_name)), file_name))
    for key, elem in d.items():
        d[key] ={elem : dialogue_name[key]}
        #Now to parse through file and get item information and set up the hierarchy
        # Number: -> File Name -> dialogue act -> Start Time, Stop Time, Participant
        root = ET.parse(location + elem).getroot()
        for dial in root.iter('dialogueact'):
            start_time = dial.get('starttime')
            end_time = dial.get('endtime')
            speaker_id = dial.get ('participant')
            dialogue_id = dial.get ('{http://nite.sourceforge.net/}id')
            if dialogue_id == dialogue_name[key]:
                d[key][elem] = {dialogue_id :{'start time' : start_time, 'stop time' : end_time, 
                                                        'Participant' : speaker_id,}}
    for key in d.items():
        print(key)
test = dialogueSearch(raw_data)
