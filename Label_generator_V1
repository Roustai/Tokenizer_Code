import xml.etree.ElementTree as ET
test_file = '/home/alex/Downloads/ICSI_plus_NXT/ICSIplus/Contributions/Summarization/extractive/Buw001.extsumm.xml'

def xmlData(file):
    root = ET.parse(file).getroot()
    data = []
    for extsumm in root.iter():
        href = extsumm.get('href')
        if href != None:
            data.append(href.split('#'))
    
    #Strip contents from id(contents)
    for i in range(len(data)):
        data[i][1] = data[i][1].replace('id(' , '')
        data[i][1] = data[i][1].replace(')' , '')
    
    #Data is not always stored cleanly in xml file, this function cleansup odd shaped data
    #that can come in the form of {file: [dial1, dial 2]} -> {file: [dial1, file:dial2]}
        if data[i][1].find('..') != -1:
            item_1, item_2 = data[i][1].split('..')
            data[i][1] = item_1
            data.append([data[i][0],item_2])
    return data

raw_data = xmlData(test_file)



def dialogueSearch(files):
    location = '/home/alex/Downloads/ICSI_plus_NXT/ICSIplus/DialogueActs/'
    file_name, dialogue_name = zip(*files)
    file_location = [] #
    
    #create dictionary hierarchy as such (file name -> dialogue act)
    d_hold = {}
    for elem in files:
        if elem[0] in d_hold:
            d_hold[elem[0]].append(elem[1])
        else:
            d_hold[elem[0]] = [elem[1]]
    
    #create a key and save items fro dialogue act like such
    #(file_name -> dialogue_act -> [speaker_id, start_time, stop_time])
    
    for key, elem in d_hold.items():
        hierarchy = {}
        root = ET.parse(location + key).getroot()
        for dial in root.iter('dialogueact'):
            start_time = dial.get('starttime')
            end_time = dial.get('endtime')
            speaker_id = dial.get ('participant')
            dialogue_id = dial.get ('{http://nite.sourceforge.net/}id')
            if dialogue_id in elem:
                hierarchy = {end_time, speaker_id, dialogue_id}
                d_hold[key][0].update(hierarchy)
                #print(d_hold[key][0])

    print(d_hold)

    #Search through files for speaker id, start time, and stop time
    file_location = location + file_name[0]  
    

    return file_location

test = dialogueSearch(raw_data)
